
# -------   Editor --------------------------------------------------------                                                  FORM EDITOR
#
# 	General Editing Form Function
#
# 	Requires table and id numbers as inputs
#
#	      Edited: 15 July 2010, 6 June 1027
#
#-------------------------------------------------------------------------------

sub main_window {

	my ($tabs,$starting_tab,$table,$id,$data) = @_;

  	my $db = gRSShopper::Database->new({dbh=>$dbh});

	my $window = gRSShopper::Window->new({
		tabs => $tabs,
		table=>$table,     				# Table being displayed in the window
		id => $id,				  		# ID of record being displayed in the window
    starting_tab => $starting_tab,		# Tab to display when window is opened
		db=>$db,                  		# Pointer to database functions
		dbh=>$dbh,               		# Pointer to DBI database handler
		data=>$data,                    # Data that accompanies the opening of the window
		person=>$Person,				# person opening the window
		load=>1,						# Load record data
	});

	
	if ($window->{tab_list}) { 
		$tabs ||= $window->{tabs}; 
		$starting_tab ||= $window->{show_active}; 
	} 

	my $length = @$tabs;
	if ($length == 0) {	$tabs = ['Edit','Preview','Publish']; }
	$starting_tab ||= "Edit";

	# Get the record associated with the tabs
	my $record;
	if ($table && $id) {
		$record = &db_get_record($dbh,$table,{$table."_id" => $id});
		unless ($record) { $record = &db_get_record($dbh,$table,{$table."_title" => $id}); }
	}
	$table_title = $record->{$table."_title"} || $tab_record->{$table."_title"} || $table;


	# Make sure we have a Help tab if help is available
	# Location of help contents is defined in the 'Form' record for that table, in form_help
	unless (grep(/^Help/i, @$tabs)) {
		if ($window->{help}) { push @$tabs,"Help"; }
  	}

	# Make tabs

	$form_tabs_tabs .= qq|<div class="tabPanel">|;
	unless (@$tabs) { $form_tabs_tabs .= "No tabs"; }
	foreach my $tab (@$tabs) { 
		my $starting;
		if ($tab eq $starting_tab) { $starting = "active"; } else {$starting = "";}
		$form_tabs_tabs .= qq|
   			<div tabindex="0" role="button" class="tab editorlinks $starting" aria-pressed="false" 
			   onclick="openTab(event, 'mainWindow$tab', 'editorlinks')">$tab</div>
		|;
	}
	$form_tabs_tabs .= qq|</div>|;

	# Make Tab contents

	my $form_tabs_content = qq|<div class="tabcontents">|;
	foreach my $tab (@$tabs) {

		my $starting;
		if ($tab eq $starting_tab) { $starting = "block"; } else {$starting = "none";}
		# Run the function to get the content
		my $tab_content="";
		my $tabfunction = "Tab_".$tab;		
		$tab_content = eval{ &$tabfunction($window,$table,$id,$record,$data,$defined) };
		$tab_content = $@ if $@;
		$form_tabs_content .= qq|
			<div id="mainWindow$tab" style="display:$starting;">
			$tab_content 	
			</div>
		|;
	}
	$form_tabs_content .= qq|</div>|;

	my $hubheader = "";
	if ($vars->{hub}) { $hubheader = &hub_header(); }
	return qq|$hubheader
        <!-- Main Window (autogenerated by grsshopper.pl main_window() -->
        <div id="myMainnav" class="mainnav">
            $form_tabs_tabs
            $form_tabs_content
        </div>     <!-- End Main Window -->
	|;
	

}


	#    New record
	#
	#   This is a bit of a placeholder, and should be created as an objecvt
	#   using gRSShopper::record->{new)()
	#   Used by main_window()
	#
	# -----------------------------------   Admin: Frame   -----------------------------------------------
sub admin_frame {

		my ($dbh,$query,$title,$content) = @_;
		my $vars = $query->Vars;
		return unless (&is_viewable("admin","general")); 		# Permissions

		
		print qq|<div class="container">
  		   <!-- Admin Frame -->
		   |.$content.qq|
		   </div>|;
		

	}


	# TABS ----------------------------------------------------------
	# ------- Open Sidebar Button --------------------------------------------
	#
	# Tab for main window to open the left navigation sidebar
	#
	# -------------------------------------------------------------------------


	# TABS ----------------------------------------------------------
	# ------- Show --------------------------------------------
	#
	# Show the contents of a record in a tab
	# Useful for putting live pages in tabs
	# Defaults to HTML but this can be changed by changing $vars->{format}
	#
	# -------------------------------------------------------------------------
sub Tab_Show {
  my ($window,$tab_table,$tab_id,$tab_record,$tab_data,$defined) = @_;
	unless ($tab_table) { return "Don't know which table to show."; exit;}
	return unless (&is_allowed("view",$tab_table));
	unless ($tab_id) { return "Don't know which ".$tab_table." number to show."; exit;}
	$vars->{format} ||= "html";
	if ($tab_record->{$tab_table."_location"} && -e $Site->{st_urlf}.$tab_record->{$tab_table."_location"}) {
		 return &slurp($Site->{st_urlf}.$tab_record->{$tab_table."_location"}); # Prefer to print existing file than to regenerate
	} else { return &output_record($dbh,$query,$tab_table,$tab_id,$vars->{format},"api"); }
	exit;
}

sub get_tab_list {

  my ($table) = @_;
	# If the Form table exists

  my @fieldlist;
	my $tablist;
	my $active;
	my $defined = 0;		# Flag set if this table has a form defined, 0 if this form is set using default values

	if (&db_table_exist($dbh,"form")) {

		# Find the record for the current $table
		my $tableid = &db_locate($dbh,"form",{form_title=>$table});

		if  ($tableid) {

			# Get the 'data' from the record, and split it into fields
			my $table_data = &db_get_single_value($dbh,"form","form_data",$tableid);
			$table_data =~ s/\n//g;
			@fieldlist = split /;/,$table_data;
			$defined = 1;

		} else {
					@fieldlist = &auto_generate_fieldlist($table);
		}
	} else {
		@fieldlist = &auto_generate_fieldlist($table);
	}

	unless (@fieldlist) { @fieldlist = &auto_generate_fieldlist($table); }

  my $currenttab = "Edit"; my $temp;
	foreach my $field (@fieldlist) {

      if ($field =~ /tab:/i) {
				($temp,$currenttab) = split /:/,$field;
				$currenttab =~ s/^\s|\s$//g;  # Remove leading or trailing space
				if ($field =~ /,active/i) { $active = $currenttab; }
				push @{$tablist->{$currenttab}},"Placeholder to make sure tab is found";
			}	else {
				push @{$tablist->{$currenttab}},$field;
			}
	}

	return ($tablist,$active,$defined,@fieldlist);

}
sub auto_generate_fieldlist {

	my ($table) = @_;

	# Get the list of columns from the database
	my @columns = ();
	my $showstmt = "SHOW COLUMNS FROM $table";
	my $sth = $dbh -> prepare($showstmt);
	$sth -> execute();


	# For each column...
	while (my $showref = $sth -> fetchrow_hashref()) {

		# Normalize the column name
		my $fullfieldname = $showref->{Field};
		my $prefix = $table."_"; $showref->{Field} =~ s/$prefix//;

		# Extract column type and length values
		my ($fieldtype,$fieldsize) = split /\(|\)/,$showref->{Type};
		if ($fieldsize+0 == 0) { $fieldsize = 10; }  # Prevent 0 fieldsize

		# Some defaults fieldtypes for important fields

		if ($table eq "form" && $showref->{Field} eq "data") { $fieldtype = "data"; }
		elsif ($table eq "presentation" && ($showref->{Field} eq "post")) { $fieldtype = "keylist"; } # Temporary
		elsif ($table eq "optlist" && $showref->{Field} eq "data") { $fieldtype = "text"; }
		elsif ($table eq "view" && $showref->{Field} eq "text") { $fieldtype = "text"; }
		elsif ($table eq "box" && $showref->{Field} eq "content") { $fieldtype = "text"; }
		elsif ($table eq "box" && $showref->{Field} eq "description") {  $fieldtype = "textarea_input"; }
		elsif ($showref->{Field} eq "description") { $fieldtype = "text"; }
		elsif ($showref->{Field} eq "data") { $fieldtype = "data"; }
		elsif ($fullfieldname =~ /_file/) { $fieldtype = "file"; }
		elsif ($fullfieldname =~ /_date/) { $fieldtype = "date"; }
		elsif ($fullfieldname =~ /_social_media/) { $fieldtype = "publish"; }
		elsif ($fullfieldname =~ /_start/ || $fullfieldname =~ /_finish/) { $fieldtype = "datetime"; }
		elsif (&db_get_record($dbh,"optlist",{optlist_title=>$fullfieldname})) { $fieldtype = "optlist"; }
		elsif ($table eq "post" && ($showref->{Field} eq "author" || $showref->{Field} eq "feed")) { $fieldtype = "keylist"; } # Temporary
		elsif ($table eq "publication" && ($showref->{Field} eq "post")) { $fieldtype = "keylist"; } # Temporary
		else { $fieldtype = "varchar"; }

		# Push the column information into the new @fieldlist array
		# (which will now look just like the comma-delimited data if it were retrieved from the Form table
		push @fieldlist,"$showref->{Field},$fieldtype,$fieldsize,$showref->{Default}";
	}



	return @fieldlist;

}
sub process_field_types {

  my ($window,$table,$id_number,$field,$record,$data) = @_;

	return if ($field eq "Placeholder to make sure tab is found");

	my ($col,$fieldtype,$fieldsize,$fielddefault,$fieldlable) = split /,/,$field;
	my $output = "";

	# Normalize column names
	$sc = $col;	$col = $table."_".$col;

	# Find Advice
	my $advice = &advice_modal($col);

	# Isolate Field Type
	my $fieldstem = $col; my $tabstem = $table."_";
	$fieldstem =~ s/$tabstem//;
	my $keylist=0; foreach my $tab (@db_tables) { if ($tab eq $sc) { $keylist=1; last; } }

	# Generate form element variables
	my $value = $record->{$col} || "";

	# Print Input Fields

	# Keylist
	if ($fieldtype eq "keylist") { $output .= &form_keylist($table,$id_number,$sc); }

	# Password
	elsif ($fieldtype eq "password") {
		#$output .= "password";
		$value = "password";	# Obscure password value
		$output .= &form_password($table,$id_number,$col,$value,$fieldsize,$fieldlable);
	}

	# Textarea Input
	elsif ($fieldtype eq "textarea_input") {
		$output .= &form_textarea_input($table,$id_number,$col,$value,$fieldsize,$advice); }

	# Varchar
	elsif ($fieldtype eq "varchar") { $output .=  &form_textinput($table,$id_number,$col,$value,$fieldsize,$fieldlable); }

	# Int
	elsif ($fieldtype eq "int") { $output .=  &form_textinput($table,$id_number,$col,$value,$fieldsize,$fieldlable); }

	# HTML text  (wysihtml)
	elsif ($fieldtype eq "html") { $output .= &form_wysihtml($table,$id_number,$col,$value,$fieldsize,$advice); }

	# Text       (textarea)
	elsif ($fieldtype eq "text") { $output .= &form_textarea($table,$id_number,$col,$value,$fieldsize,$advice); }

	# Longext       (textarea)
	elsif ($fieldtype eq "longtext") { $output .= &form_textarea($table,$id_number,$col,$value,$fieldsize,$advice); }

	# Rules       (textarea)
	elsif ($fieldtype eq "rules") { $output .= &form_rules($table,$id_number,$col,$value,$fieldsize,$advice); }

	# Option List (Selections defined in the'optlist' table; defaults to varchar if options are missing)

	elsif ($fieldtype eq "optlist") {
		 $output .=  &form_optlist($window,$table,$id_number,$col,$value,$fieldsize,$advice,$fieldlable,$defined,1); }

	# Data  - each line ; delimited  and individual items , delimited. First line is data headers
	elsif ($fieldtype eq "data") { $output .=  &form_data($col,$record->{$col},$id_number,$table); }

	# File
	elsif ($fieldtype eq "file") { $output .=  &form_file_select($dbh,$table,$id_number,$col); }

	# Date
	elsif ($fieldtype eq "date") { $output .=  &form_date_select($table,$id_number,$col,$value,$fieldsize,$fieldlable); }

	# DateTime
	elsif ($fieldtype eq "datetime") { $output .=  &form_date_time_select($record,$col,$colspan,$fieldlable,$advice); }

	# Publish
	elsif ($fieldtype eq "publish") { $output .=  &form_publish($table,$id_number,$col,$value); }

	# Commit
	elsif ($fieldtype eq "database") {  # Used only in the 'form' data type, to provide database editing functionality
		$output .=  &form_database($table,$col,$id_number,$record,$data);
	}

	# Yes-No
 	elsif ($fieldtype eq "yes-no") {
	  $output .= &form_yesno($table,$col,$id_number,$value,$size,$fieldlable,$advice);
	}

	# Harvester
  	elsif ($fieldtype eq "harvester") {
	  $output .= &form_harvester($table,$col,$id_number,$value,$size,$fieldlable,$advice);
	}

	elsif ($keylist && ($fieldstem ne "url") && ($sc ne "link") && ($sc ne "field") && ($sc ne "post")) {
		#$form_text .= &form_keylist($table,$id_value,$sc);
		# $form_text .=  &form_keyinput($col,$record->{$col},2);


	} elsif ($fieldtype eq "social_media") { $output .= &form_publish($table,$id_number,$col,$value,$fieldsize,$advice);

	} elsif (($table eq "media") && ($fieldstem eq "link")) {
		$output .=  &form_keyinput($col,$record->{$col},2);

	} elsif ( $table eq "link" && $col =~ /_category/ ) {
		$output .=  &form_textinput($table,$id_number,$col,$value,4,$fieldlable);

	} elsif ( $col =~ /_content/ || $col =~ /_description/) {
		#$form_text .=  &form_textarea($col,80,30,$record->{$col});
		$output .=  &form_wysihtml($table,$id_number,$col,$value,$fieldsize,$advice);

	} elsif ($col =~ /_file/) {
		$output .=  &form_file_select($dbh,$table,$id_number,$col);

	} elsif ($col =~ /_date/) {
		$output .=  &form_date_select($record,$col,$colspan,$advice,$size);

	} elsif ($col =~ /_data/) {
		$output .=  &form_data($col,$record->{$col},$id_number,$table);

	} elsif ($col =~ /_start|_finish/) {
		$output .=  &form_date_time_select($record,$col,$colspan,$advice);

	} elsif ($col =~ /_timezone/) {
		$output .=  &form_timezone($col,$record->{$col},$table,$record);

	} elsif ($col =~ /_edit|_show/) {
		$output .= &form_boolean($col,$record->{$col},$table,$record);



	} elsif ( $col =~ /_current|_updated|_refresh|_textsize|_tag|_srefresh|_supdated/) {
		$output .=  &form_textinput($table,$id_number,$col,$value,40,$fieldlable);

	} elsif ( $col =~ /_creatorname|_source/ ) {
		$output .=  &form_textinput($table,$id_number,$col,$value,40,$fieldlable);


	} elsif ($sc eq "submit") {
		$output .=  &form_submit();
	} else {
		$output .=  &form_textinput($table,$id_number,$col,$value,40,$fieldlable);
	}



  return $output;

}

sub advice_modal {

	my $col = shift;
	my $advice_content;

	# Make sure we have advice to give
	return "Advice column undefined" unless ($col);
	my $advice_location = $col.".htm";
	return "No advice for $col" unless (&db_locate($dbh,"page",{page_location => $advice_location}));

	# Get the advice from the right page
	my $wp = &db_get_record($dbh,"page",{page_location => $advice_location});
	$wp->{page_content} = $wp->{page_code};
	&format_content($dbh,$query,$options,$wp);
	$advice = $wp->{page_content};
	$advice =~ s/<div(.*?)>|<\/div>//ig;	# Ensure help content doesn't break out of modal

	# Make the advice modal
	if ($wp->{page_id}) { 
		my $advice_modal = qq|
			<div class="modal" id="$col-modal1">
				<div class="modal-overlay modal-toggle"></div>
				<div class="modal-wrapper modal-transition">
					<div class="modal-header">
						gRSShopper Help
					</div>
		
					<div class="modal-body">
						<button class="modal-toggle1 modal-close" onclick="\$('#$col-modal1').toggleClass('is-visible');">close</button>
						<div class="modal-content">$advice
						</div>
					</div>
				</div>
			</div>|;
		my $advice_url = $Site->{st_url}."page/".$advice_page;
		$advice_content .= qq|$advice_modal
  		    <button class="button-blank modal-launch-button" onClick="\$('#$col-modal1').toggleClass('is-visible');"><i class="far fa-question-circle"></i></button>
  			|;
	} else { $advice_content = "No advice for $col"; }

	return $advice_content;
}

	sub hub_header {
		return if ($Site->{context} eq "cron");
		my $assets = $Site->{st_url}."assets";
		return qq|
			<html>
			<head>
			    <meta charset="utf-8">
				<title>Admin $vars->{action} </title>
				<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/mini.css/3.0.1/mini-default.min.css">
				<link rel="stylesheet" href="$assets/css/grsshopper_admin.css">
				<!-- Scripts -->
				<!-- JQuery -->
				<script src="$assets/js/jquery.min.js"></script>
				<!-- JQuery UI -->
				<script src="$assets/js/jquery-ui.min.js"></script>
				<!-- JQuery ToggleButton -->
				<script src="$assets/js/select-togglebutton.js"></script>
				<!-- CK Editor -->
				<script src="//cdn.ckeditor.com/4.7.0/standard/ckeditor.js"></script>
				<script src="//cdn.ckeditor.com/4.7.0/basic/adapters/jquery.js"></script>
				<!-- File Upload -->
				<script src="https://hayageek.github.io/jQuery-Upload-File/4.0.11/jquery.uploadfile.min.js" defer></script>
				<!-- DateTime Picker -->
				<script src="$assets/js/jquery.datetimepicker.full.min.js"></script>
				<!-- Font-Awesome -->
				<script src="https://kit.fontawesome.com/bf62bb2348.js"crossorigin="anonymous"></script>
				<script src="$assets/js/hub_admin.js"></script>
			</head>
			<body>
			<div id="spinner-donut" class="spinner-donut"></div>
		|;


	}
1;
