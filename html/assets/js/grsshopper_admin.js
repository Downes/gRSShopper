var url = 'cgi-bin/api.cgi';
var version = '0.5';

// Stores current status of the Reader
var readerTable;
var readerIndex;



//
//  Initialize Content Windows
//




function startUp(url) {

    $( document ).ready(function() {
        fetch('cgi-bin/api.cgi', {
            method: 'post',
            body: JSON.stringify({cmd:'authenticate'}),
        })
        .then(function(body){
            return body.text(); 
        }).then(function(data) {
            if (data == 1) {
                executeStartUp(url);
            } else {
                openTab("", 'Profile', 'mainlinks');
                $('#login-panel').show();
            }
        }).then(function(data){
            console.log(data);
        });
    });

}

function executeStartUp(url) {

    $( document ).ready(function() {

        read_into({div:"Make",cmd:"list_tables",table:"tables",tab:"Make"});  // Load list of tables

            loadList({div:'myData',cmd: 'list', table: 'media' });  // Load audio podcast
            loadList({div:'Read',cmd:'list',table:'link'});         // Load links from RSS Aggregator


            $('#list-button').hide();    // Hide some tabs

            
            closeTalkNav();  // To get it to slide the right way when first started
            document.getElementById("main").style.width = viewportWidth+"px";  // Initialize main window width

            loadHTML({div:'Reader',cmd:'show',table:'page',id:'gRSShopper: Start'}); // Load start page into Reader
            openTab("", 'Reader', 'mainlinks');                                      // Open Reader


    });

}
//
//  loadList
//
//  Sets up and loads list results page, including search form and next n results
//

function loadList(request) {
var whatitis = `Cmd ${request.cmd} Status ${request.status}`; 
    var mainContainer = document.getElementById(request.div);
    mainContainer.innerHTML = '';  // Clear previous content from list container
    loadListHeaders(request);
    loadData(request);

}

//
//  loadListHeaders
//
//  Sets up and loads list results page, including search form and next n results
//

function loadListHeaders(request) {

    // create context object
 
    var mainContainer = document.getElementById(request.div);
    var headers = document.createElement("div");
    var panel = this.nextElementSibling;

    // sure, there is probably a more concise way to do this....

    // These search templates are automatically generated by gRSShoper and 
    // are stored in /assets/js/gRSShopper_dataTemplates.js
    // The idea is that searches can use facets as defined by optlists (done)
    // and associations as found in the graph (not done) as well as searches
    // on the contents of individual fields (not done)

    var templatetext;
    switch (request.table) {
        case 'link': templatetext = linkSearchTemplate(request,panel); break;
        case 'feed': templatetext = feedSearchTemplate(request,panel); break;
        case 'box': templatetext = boxSearchTemplate(request,panel); break;
        case 'course': templatetext = courseSearchTemplate(request,panel); break;
       // case 'form': templatetext = formSearchTemplate(request,panel); break;
        case 'media': templatetext = mediaSearchTemplate(request,panel); break;
        case 'optlist': templatetext = optlistSearchTemplate(request,panel); break;
        case 'page': templatetext = pageSearchTemplate(request,panel); break;
        case 'post': templatetext = postSearchTemplate(request,panel); break;
        case 'presentation': templatetext = presentationSearchTemplate(request,panel); break;
        case 'project': templatetext = projectSearchTemplate(request,panel); break;
        case 'publication': templatetext = publicationSearchTemplate(request,panel); break;
        case 'template': templatetext = templateSearchTemplate(request,panel); break;
        case 'view': templatetext = viewSearchTemplate(request,panel); break;
        default: templatetext = ""; break;        
    }
    headers.innerHTML = templatetext;
    mainContainer.appendChild(headers);

}



function togglePanel(panel) {
    if (panel.style.display === "block") {
        panel.style.display = "none";
      } else {
        panel.style.display = "block";
      }

}

var panel = this.nextElementSibling;



//
//  submitData
//
//  Submit data using the API 
//  The input var 'request' expects JSON values for 'table','field', 'id' and 'value'
//  and div (to show the response)
//

function submitData(request,host) {
    spin_on();
    // alert(JSON.stringify(request));
    host = typeof host !== 'undefined' ? host : 'cgi-bin/api.cgi';
    if (request.host) { host = request.host; }
   
    fetch(host,{
        method: 'POST', // or 'PUT'
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(request),
      })
        .then(response => response.json())
        .then(function (data) {  // api error
            showResponse(request,data);
            if (data.status == "error") { showResponse(request,data); }
          })
        .catch((error) => { // server error
            console.error('Error:', error);}
      );
      spin_off();

}

//
//  submitData
//
//  Submit data using the API 
//  Returns a bunch of JSON data based on the request
//  (for example, data from a link obtained from the server)
//  and uses it to populate the current form with additional data
//

function populateForm(request,host) {
    spin_on();
    // alert(JSON.stringify(request));
    host = typeof host !== 'undefined' ? host : 'cgi-bin/api.cgi';
    if (request.host) { host = request.host; }

    var titlefield = document.getElementById("post_title");
    var descfield = document.getElementById("post_description");    
    var authorfield = document.getElementById("post_author"); 
    var feedfield = document.getElementById("post_feed"); 

    alert(`dewc is ${descfield.value}`);
   
    fetch(host,{
        method: 'POST', // or 'PUT'
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(request),
      })
        .then(response => response.json())
        .then(function (data) {  // api error
            //alert(`returned Title is ${data.Title}`);
            //alert("Returned desc is "+data["X-Meta-Description"]);         
            titlefield.value=`${data.Title}`;
            authorfield.value=`${data.author}`; alert("Written by "+data.author); // Nieman Lab
            feedfield.value=`${data.feed_title}`; alert("Feed title "+data.feed_title); // Nieman Lab            
            CKEDITOR.instances["post_description"].setData(data["X-Meta-Description"])
            
           // descfield.value=`Whatever ${data["X-Meta-Description"]}`;
            showResponse(request,data);
            if (data.status == "error") { alert(request,data); }
          })
        .catch((error) => { // server error
            alert(error);
            console.error('Error:', error);}
      );
      spin_off();

}


//
//  submitDataFromSelect
//
//  Finds and processes selected values before submit
//

function submitDataFromSelect(col,table,id,host) {
    var colresult = col+"_result";
	var newval = $('#'+col).val();
	var subval = newval.toString();
    submitData({host:host,div:colresult,cmd:'update',table:table,field:col,id:id,value:subval});
}
//
//  loadHTML
//
//  Obtain HTML code from the API and load into selected div
//  The input var 'request' expects 'table','div' and 'cmd' plus any search parameters
//


function loadHTML(request) {
    fetch('cgi-bin/api.cgi',{
        method: 'POST', // or 'PUT'
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(request),
      })
        .then(response => response.text()) 
        .then(html => { 
            $('#'+request.div).html(html);       
            // console.log(html);
            // .innerHTML doesn't execute script, .html() does (who knew?)
            //return document.getElementById(request.div).innerHTML = html;
          })
        .catch((error) => {
            console.error('Error:', error);}
      );
}


//
//  loadData
//
//  Obtain data from the API and load into selected div
//  The input var 'request' expects 'table','div' and 'cmd' plus any search parameters
//


function loadData(request) {
    fetch('cgi-bin/api.cgi',{
        method: 'POST', // or 'PUT'
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(request),
      })
        .then(response => response.json())
        .then(function (data) {
            appendData(request,data);
          })
        .catch((error) => {
            console.error('Error:', error);}
      );

}

//
//  loadDataFromForm
//
//  Use form data to get the request body
//  Obtain data from the API and load into selected div
//  The input var 'request' expects 'table','div' and 'cmd' 
//  as well as 'formid' (which should also specify table and cmd)
//



function loadDataFromForm(request) {

    var formData = new FormData(document.getElementById(request.formid));
    const plainFormData = Object.fromEntries(formData.entries());
    const formDataJsonString = JSON.stringify(plainFormData);

    //alert(formDataJsonString);
    
    // Submit data and then do actions
    fetch('cgi-bin/api.cgi',{
        method: 'POST', // or 'PUT'
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(plainFormData),
      })
        .then(response => response.json())
        .then(function (data) {
           // alert(data);
            appendData(request,data);
          })
        .catch((error) => {
            console.error('Error:', error);}
      );
}

function uploadFile(event,request) {
    const files = event.target.files
    const formData = new FormData(fileUploadForm)
    formData.append('myfile', files[0])

    fetch('cgi-bin/api.cgi', {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        showResponse(request,data);
        if (data.status == "Error") { console.log(data.message) }
        console.log(data)
        console.log(request.div)
    })
    .catch(error => {
        console.error(error)
    })
}


function appendData(request,data) {


    var mainContainer = document.getElementById(request.div);
    removeElementsByClass('list-result');  // clear previous list data


    if (data.data) {       

        var listHeader = document.createElement("div");
        listHeader.innerHTML = listHeaderTemplate(request,data.metadata);
        mainContainer.appendChild(listHeader);

        for (var i = 0; i < data.data.length; i++) {
            var div = document.createElement("div");
            var templ = selectTemplate(request,data.data,i);
            div.innerHTML = templ;
            mainContainer.appendChild(div);
        }
        if (data.metadata.end < data.metadata.count) {
            data.metadata.newstart = parseInt(data.metadata.end)+parseInt(data.metadata.number);
            if (parseInt(data.metadata.newstart) > parseInt(data.metadata.count)){ 
                data.metadata.number = parseInt(data.metadata.count) - parseInt(data.metadata.end);
            }
            var listFooter = document.createElement("div");
            listFooter.innerHTML = listFooterTemplate(request,data.metadata);
            mainContainer.appendChild(listFooter);
        }

    } else {
        var div = document.createElement("div");
        div.innerHTML = "<p>No Records</p>";
        mainContainer.appendChild(div);
       // alert("No data");
    }
}

function showResponse(request,data) {

    // Show the OK/error response
    if (request.div) {
        var mainContainer = document.getElementById(request.div);
        if (mainContainer) { 
            if (data.message) {
                mainContainer.innerHTML = `${data.message}`;
            } else {
                mainContainer.innerHTML = `${data.response}`;
            }
            if (data.status == "Error") {
                mainContainer.classList.add("error"); 
            } else {
                mainContainer.classList.add("success");
            }
        } 
        
    }

    // Shopw the API-specific response
    if (data.div && data.contents) {    
        var divContainer = document.getElementById(data.div);
        if (divContainer) { 
            divContainer.style.display='block';
            divContainer.innerHTML = `${data.contents}`; }
    }

    // Update the preview
    $( document ).ready(function() { // Shouldn't strictly be necessary, but can't hurt
        $('#preview-record-summary').load(`${url}?cmd=show&table=${request.table}&id=${request.id}&format=summary`);
    });
    // loadHTML({div:'Preview',cmd:'show',table:request.table,id:request.id,format:summary});
 
}

function removeElementsByClass(className){
    var elements = document.getElementsByClassName(className);
    //while(elements.length > 0){
      //  elements[0].parentNode.removeChild(elements[0]);
   // }
}

function selectTemplate(request,data,i) {

    if (request.cmd == 'list') {
       if (request.table == 'author') { return authorListTemplate(data,i); } 
       else if (request.table == 'feed') { return feedListTemplate(data,i); }       
       else if (request.table == 'link') { return linkListTemplate(data,i); }
       else if (request.table == 'media') { return mediaListTemplate(data,i); }
       else if (request.table == 'post') { return postListTemplate(data,i); } 
       else { return genericListTemplate(request.table,data,i);}       
    } else if (request.cmd == 'show') {
       if (request.table == 'link') { return linkShowTemplate(request,data,i); }
       if (request.table == 'feed') { return feedShowTemplate(request,data,i); }       
    }
}
//
//  templates
//

function listHeaderTemplate(request,metadata) {
    return `<div class="table-list-element list-result">
    Listing ${metadata.start} to ${metadata.end} of ${metadata.count} ${request.table}s
    </div>`;
}

function listFooterTemplate(request,metadata) {
    return `<div class="table-list-element list-result"
    onClick="loadList({div:'${request.div}',cmd:'list',
        table:'${request.table}',number:'${metadata.number}',
        start:'${metadata.end}'});">
    ${metadata.number} More starting at ${metadata.end}
    </div>`;
}

function authorListTemplate(data,i) {
    return `<div class="table-list-element list-result">
    <a href="#" onClick="openTab(event, 'editor', 'mainlinks');openDiv(url,'editor','edit','author','${data[i].id}','Edit');">
    ${data[i].name}</a>
    </div>`;
}


function feedListTemplate(data,i) {
    return `<div class="table-list-element list-result">
    <a href="#" onClick="
       loadHTML({div:'editor',cmd:'edit',table:'feed',id:'${data[i].id}'});
       openTab(event, 'editor', 'mainlinks');
       ">
    <img src="assets/img/${data[i].status}tiny.jpg"> ${data[i].title}
    <span style="font-size:8pt;"><br/></span></div>`;
 }

 //             openDiv(url,'main','edit','feed','8238','Edit');
    // onClick="openDiv(url,'main','edit','feed','${data[i].id}','Edit');"
    //   
    // $('.form-group').togglebutton();

function linkListTemplate(data,i) {
    if (!data[i].genre) { data[i].genre = "none"; }
    return `<div class="table-list-element list-result">
    [<a href="#" onClick="
        openDiv(url,'editor','edit','link','${data[i].id}','Edit');
        openTab(event, 'editor', 'mainlinks');
        ">E</a>]
    <a href="#" onClick="
        loadData({div:'Reader',cmd:'show',table:'link',id:'${data[i].id}'});
        openTab(event, 'Reader', 'mainlinks');
        ">
    ${data[i].title}</a>
    <span style="font-size:8pt;"><br/>
    ${data[i].section} - ${data[i].genre} - ${data[i].category} - ${data[i].status}</span></div>`;
}

function mediaListTemplate(data,i) {
    if (!data[i].genre) { data[i].genre = "none"; }
    return `<div class="table-list-element list-result">
    [<a href="#" onClick="
        openDiv(url,'editor','edit','media','${data[i].id}','Edit');
        openTab(event, 'editor', 'mainlinks');
        ">E</a>]
    <a href="#" onClick="
        loadData({div:'Reader',cmd:'show',table:'media',id:'${data[i].id}'});
        openTab(event, 'Reader', 'mainlinks');
        ">
    ${data[i].title}</a>
    <span style="font-size:8pt;"><br/>
    ${data[i].mimetype}</span></div>`;
}


function postListTemplate(data,i) {
    return `<div class="table-list-element list-result">
    <a href="#" onClick="openTab(event, 'editor', 'mainlinks');openDiv(url,'editor','edit','post','${data[i].id}','Edit');">
    ${data[i].title}</a>
    </div>`;
}

function genericListTemplate(table,data,i) {
    return `<div class="table-list-element list-result">
    <a href="#" onClick="openTab(event, 'editor', 'mainlinks');openDiv(url,'editor','edit','${table}','${data[i].id}','Edit');">
    ${data[i].title}</a>
    </div>`;
}

function feedShowTemplate(request,data,i) {

    // Clear previous content
    var mainContainer = document.getElementById(request.div);
    mainContainer.innerHTML='';

    // return new content
    return prevTemplate(request,data,i)+
           nextTemplate(request,data,i)+
            `Title: ${data[i].title} <br>
            Link: ${data[i].link} <br>
            URL: ${data[i].url} <br>            
            ID: ${data[i].id} <br>
            Category: ${data[i].feed_category}    Genre:  ${data[i].feed_genre}
            Category: ${data[i].feed_status}    Genre:  ${data[i].feed_class}
            Description: ${data[i].description}<br>
            `;
}


function linkShowTemplate(request,data,i) {

    // Clear previous content
    var mainContainer = document.getElementById(request.div);
    mainContainer.innerHTML='';

    // return new content
    return `<div class="tabPanel">`+
            firstTemplate(request,data,i)+
            prevTemplate(request,data,i)+
            autopostTemplate(request,data,i)+
           lastTemplate(request,data,i)+
           nextTemplate(request,data,i)+
            `</div>
            <div style="padding:10px;">
            <h2> ${data[i].title} </h2><br>
            Link: ${data[i].link} <br>
            ID: ${data[i].id} <br>
            Feed: <a href="${data[i].feed_link}">${data[i].feed_title}</a><br>
            Category: ${data[i].feed_category} <br>
            Genre:  ${data[i].feed_genre}<br>
            Section:  ${data[i].feed_section}<br>
            Description: ${data[i].description}<br>
            View original: <a href="${data[i].link}" target="new">Click here</a>
            </div>`;
}

function nextTemplate(request,data,i) {

    return `<div class="tab mainlinks" role="button" tabindex="3" style="float:right;"
       onClick="loadData({div:'${request.div}',cmd:'show',table:'${request.table}',id:'${data[i].next}'});"><i class="fa fa-angle-right"></i>
       </div>`;

}

function lastTemplate(request,data,i) {

    return `<div class="tab mainlinks" role="button" tabindex="2" style="float:right;"
       onClick="loadData({div:'${request.div}',cmd:'show',table:'${request.table}',id:'${data[i].last}'});"><i class="fa fa-angle-double-right"></i>
       </div>`;

}

function prevTemplate(request,data,i) {

    return `<div class="tab mainlinks"  role="button" tabindex="1"
    onClick="loadData({div:'${request.div}',cmd:'show',table:'${request.table}',id:'${data[i].prev}'});">
    <i class="fa fa-angle-left"></i>
    </div>`;

}

function firstTemplate(request,data,i) {

    return `<div class="tab mainlinks" role="button" tabindex="0"
       onClick="loadData({div:'${request.div}',cmd:'show',table:'${request.table}',id:'${data[i].first}'});"><i class="fa fa-angle-double-left"></i>
       </div>`;

}

function autopostTemplate(request,data,i) {

    return `<div class="tab mainlinks" role="button" tabindex="4" style="align:center;"
       onClick="
            openDiv(url,'editor','edit','post','autopost','','Edit',${data[i].id});
            openTab(event,'editor','mainlinks');
        ">Autopost</i>
       </div>`;

}

//   Not used?
//   For reference

function templater(strings, ...keys) {
    return function(data) {
        let temp = strings.slice();
        keys.forEach((key, i) => {
            temp[i] = temp[i] + data[key];
        });
        return temp.join('');
    }
};

//
//  openDiv
//
//  Load content into a div and show the div
//  Optionally specify a starting tab in the div and make the tab active
//

function openDiv(url,div,app,db,id,title,starting_tab,autopost) {
 // alert("Cmd: "+app+", Table: "+db+", ID: "+id+", Title: "+title+", Starting Tab: "+starting_tab+"Autopost: "+autopost);
    // Assign a URL to main add an "active" class to the button that opened the tab

    if (title) { url = url + "?cmd="+app+"&app="+app+"&db="+db+"&id="+id+"&title="+title+"&autopost="+autopost; }
    else if (id) { url = url + "?cmd="+app+"&app="+app+"&db="+db+"&id="+id+"&autopost="+autopost; }
    else { url = url + "?cmd="+app+"&app="+app+"&db="+db; }


    var openme = 'main';
    if (div) { openme=div;}
    $('#'+openme).load(url, function(respose, status, xhr) {
        if (status == "error") {
            var msg = "Sorry but there was an error: ";
            alert(msg + xhr.status + " " + xhr.statusText);
        }
     });
     $('#'+openme+'-tab').show();
     if (starting_tab) { openTab(event,starting_tab, 'editorlinks'); }

}

//
//  openDiv
//
//  Load content into a div
//  Accepts input as serialized json
//

function read_into(args) {

   if (!args.url) { args.url = url; }                                       // set default api url
   if (!args.div) { alert("Div not specified in read_into"); return;}       // set div to read into
   if (args.cmd) {
       args.url += "?cmd="+args.cmd;
       if (args.table) { args.url += "&table="+args.table; }
       if (args.id) { args.url += "&id="+args.id; }
       if (args.tab) { args.url += "&tab="+args.tab; }
   }

    // Load Content into Div
    //  $('#Reader').load(url+ "?cmd=show&table=link&id=2",function(response, status, xhr){

    $('#'+args.div).load(args.url,function(response, status, xhr){
        if (status == "error") {
             var msg = "Sorry but there was an error loading "+args.url+" into "+args.div;
             // alert(msg + xhr.status + " " + xhr.statusText);
             return;
           }
      });
     

}



//
// The Main Window uses Bootstrap Nav tabs
// For information see: https://getbootstrap.com/docs/4.0/components/navs/
//


//
// Visibility toggle
//

function toggle_visibility(id) {
       var e = document.getElementById(id);
       if(e.style.display == 'block')
          e.style.display = 'none';
       else
          e.style.display = 'block';
    }

    //
    // Generic 'Persist' Show-Hide toggle - not sure where I use this
    //


    function onclick_function(col_name,persist) {

        $('#'+col_name+'_button').show();
        if (persist) { return; }
        $('#'+col_name+'_result').hide();
    }



//
//  Open and Close Left and Right Side Navigation
//  Resizing when window resized
//

// Set up initial values


    var sidebarwidth=450;
    var leftstatus="closed";
    var leftWindowWidth = 0;
    var rightWindowWidth = 0;
    var rightstatus="closed";
    
    var viewportWidth = jQuery(window).width();





function openNav() {
    leftWindowWidth = sidebarwidth;
    if (viewportWidth < leftWindowWidth) { leftWindowWidth = viewportWidth; }  // Don't overlap small windows
    mainWindowWidth = viewportWidth-leftWindowWidth-rightWindowWidth;

    if (document.getElementById("mySidenav") !== null) { 
        document.getElementById("mySidenav").style.width = leftWindowWidth+"px";
    }
    document.getElementById("main").style.marginLeft = leftWindowWidth+"px";
    document.getElementById("main").style.width = mainWindowWidth+"px";
    document.getElementById("main").style.maxWidth = mainWindowWidth+"px";
    //alert("Open tab");
    openTab('', 'Help', 'tablinks');
    leftstatus="open";
}

function closeNav() {
    leftWindowWidth = 0;
    if (document.getElementById("mySidenav") !== null) { 
        document.getElementById("mySidenav").style.width = leftWindowWidth+"px";
    }
    leftstatus="closed";

    mainWindowWidth = viewportWidth-rightWindowWidth;
    document.getElementById("main").style.marginLeft = "0px";
    document.getElementById("main").style.width = mainWindowWidth+"px";
    document.getElementById("main").style.maxWidth = mainWindowWidth+"px";

}


function openTalkNav() {
    rightWindowWidth = sidebarwidth;
    rightWindowLeft = viewportWidth - sidebarwidth;

    if (rightWindowLeft < 0) { rightWindowLeft = 0; }  // Don't overlap small windows
    if (viewportWidth < rightWindowWidth) { rightWindowWidth = viewportWidth; }  // Don't overlap small windows
    mainWindowWidth = viewportWidth-leftWindowWidth-rightWindowWidth;

    document.getElementById("main").style.marginRight = rightWindowLeft+"px";
    document.getElementById("main").style.width = mainWindowWidth+"px";
    document.getElementById("main").style.paddingRight = "0px"; 

    document.getElementById("myTalknav").style.left = rightWindowLeft+"px";
    document.getElementById("myTalknav").style.width = sidebarwidth+"px";
    document.getElementById("main").style.maxWidth = mainWindowWidth+"px";
    rightstatus="open";
}

function closeTalkNav() {
    rightWindowWidth = 0;
    rightWindowLeft = viewportWidth;
    document.getElementById("myTalknav").style.left = rightWindowLeft+"px";
    document.getElementById("myTalknav").style.width = rightWindowWidth+"px";
    rightstatus="closed";

    mainWindowWidth = viewportWidth-leftWindowWidth;
    document.getElementById("main").style.marginRight = rightWindowLeft+"px";
    document.getElementById("main").style.paddingRight = "15px";    
    document.getElementById("main").style.width = mainWindowWidth+"px";
    document.getElementById("main").style.maxWidth = mainWindowWidth+"px";
}

$( window ).resize(function() {
  viewportWidth = jQuery(window).width();
//  alert("window resized to "+viewportWidth);
  if (leftstatus == "open") { openNav(); }
  if (leftstatus == "closed") { closeNav(); }
  if (rightstatus == "open") { openTalkNav(); }
  if (rightstatus == "closed") { closeTalkNav(); }
});
//
// Load some content into divs - I'm not sure I use this anywhere
//




$(document).ready( function() {
    $("#load_home").on("click", function() {
        $("#content").load("content.html");
    });
});







//
// Open the Columns Window (Used by the Forms editor)
//

function openColumns(url,db) {

    // Load the api result into the columns_table div
    $("#columns_table").load(url, function(response, status, xhr) {
        if (status == "error") {
            var msg = "Sorry but there was an error showing columns: ";
            // alert(msg + xhr.status + " " + xhr.statusText);
        }
     });
}




//
// Function for tab opening
//
// Closes other tabs in parent div and opens the tab 'tabName'
//


function openTab(event, tabName, tabType, tabID) {
    //alert("Open "+tabName+ "("+tabType+")");
    $(document).ready(function(){
        // Declare all variables
        var i, tabcontent, tablinks;
        // Get all siblings and hide them
    // alert("opening tab "+tabName);
        $('#'+tabName).siblings().hide();  
    
        // Get all elements with class=tabType and remove the class "active"
        $('.'+tabType).removeClass("active");
        // Show the current tab, and add an "active" class to the button that opened the tab
        $('#'+tabName).show();
        $('#'+tabName).addClass("active");
        $('#'+tabName+"Button").addClass("active"); 
        $('#'+tabName+"Button").attr('aria-pressed', 'true');
        $('#'+tabName+"Button").siblings().removeClass("active");     
        $('#'+tabName+"Button").siblings().attr('aria-pressed', 'false');
        if (tabID) { 
            $('#'+tabID).show(); // Force hidden tab to reveal itself
            $('#'+tabID).addClass("active"); // and be active
        }      
    });      
}



//
// Open hidden left-side tab
//

function openHiddenTab(event,url,search,tabname,db,tab) {

    // Assign a URL
    if (search.length > 0) { url = url + "?cmd=list&obj=record&tab="+tab+"&search="+search+"db="+db;}
    if (search.length == 0) { url = url + "?cmd=list&obj=record&tab="+tab+"&table="+db; }

    // Get all elements with class="tablinks" and remove the class "active"
    tablinks = document.getElementsByClassName("tablinks");
    for (i = 0; i < tablinks.length; i++) {
        tablinks[i].className = tablinks[i].className.replace(" active", "");
    }

    // Load the result into the hidden tab content window
    $("#List").load(url, function(response, status, xhr) {
        if (status == "error") {
            var msg = "Sorry but there was an error: ";
            alert(msg + xhr.status + " " + xhr.statusText);
        }
     });

    // Show the hidden tab
    $("#"+tabname).show();

    // Open the tab content
    openTab(event, 'List');

    // Make the formerly hidden tab active
    $("#"+tabname).addClass("active");
}

function WhichElementIsThis(event) {
    event = event || window.event;
    var elem = event.target || event.srcElement;
    return elem;
}






// Submission Functions






//
// API List Submission Function - handles input from list and search requests
//                                and places results in a div with id 'List'
//

function list_form_submit(url,formid) {
  var dat;
  dat = $('#'+formid).serialize();
  //alert(dat);
   $.ajax({
        type: "POST",
        url: url,
        data: $('#'+formid).serialize(), // serializes the form's elements.
        error: function(value) {
            $("#List").html("<div class=\"error\">An error has occurred: "+value+"</div>");
        },
        success: function(value)
        {
            $("#List").html(value);
            $("#mySidenav").animate({ scrollTop: 0 }, "fast");
        }
      });
}
//
// API Input Submission Function
//

function spin_on() {
    var spinner = document.getElementById("spinner-donut");
    spinner.style.display = "block";
}

function spin_off() {
    var spinner = document.getElementById("spinner-donut");
    setTimeout(() => { spinner.style.display = "none"; }, 500);
}

function api_submit(url,div,cmd,obj,table,id,col,content) {
        spin_on();
        $.ajax({
            url: url,
            data: {cmd:cmd,obj:obj,table:table,id:id,col:col,content:content},
            error: function(value) {
                alert("Sorry, but an error occurred: "+value);
                $('#'+div+'_result').html("<div class=\"error\">An error has occurred</div>");
                $('#'+div+'_result').show(); },
            success: function(value) {
                $('#'+div+'_result').html("<div class=\"success\">"+value+"</div>");
                $('#'+div+'_liveupdate').html(value);
               // $('#'+div+'_result').show();
// alert(previewURL);
                var previewUrl= url+"?cmd=show&table="+table+"&id="+id+"&format=summary";
                $('#Preview').load(previewUrl);
                $('.empty-after').val("");
               },
            type: "post",
        });
        spin_off();
        //setTimeout(function(){$('#'+div+"_result").hide();}, 100000);
}


//
// Generic Submission Function
//


function submit_function(url,table,id,col_name,content,type) {
//alert("Called"+table+id+col_name+content+type);
        spin_on();
        $.ajax({
            url: url,
            data: {cmd:'update',type:type,table_id:id,table_name:table,value:content,col_name:col_name,type:type},
            error: function(value) {
                $('#'+col_name+'_result').html("<div class=\"error\">An error has occurred</div>");
                $('#'+col_name+'_result').show();
              },

            success: function(value) {
                $('#'+col_name+'_result').hide();
                $('#'+col_name+'_result').html("<div class=\"success\">"+value+"</div>");
                $('#'+col_name+'_liveupdate').html(value);
                //$('#'+col_name+'_result').show();
                var previewUrl= url+"?cmd=show&table="+table+"&id="+id+"&format=summary";
                $('#Preview').load(previewUrl);
                $('.empty-after').val("");
               },
            type: "post",
        });

        spin_off();
        //setTimeout(function(){$('#'+col_name+"_result").hide();}, 100000);
}

function record_delete(url,table,id,col_name,content,type) {
//
// Function for delete record
//

  if (confirm('Are you sure you want to delete?')) {
    // Delete it!
    $.ajax({
        url: url,
        data: {table:table,id:id,cmd:'delete',obj:'record'},
        error: function(value) { alert("error deleting "+table); },
        success: function(value) {
            $('#'+table+"-"+id).html("deleted");
            setTimeout(function(){$('#'+table+"-"+id).hide(); }, 1000);
        },
        type: "post",
    });




  } else {
    // Do nothing!
  }

}
//
// Function for Graph Removal
//

function removeKey(url,table,id,key,keyid) {

        var col_name = table+"_"+key;
        submit_function(url,table,id,col_name,keyid,'remove');
}

//
// Submit Column Function
//

function submit_column(url,table,id,col_name,content,type) {
        $('#submit_column_result').hide();
        spin_on();
        $.ajax({
            url: url,
            data: {cmd:'update',type:type,table_id:id,table_name:table,value:content,col_name:col_name},
            error: function(value) {
                $('#submit_column_result').html("<div class=\"error\">An error has occurred</div>");
                $('#submit_column_result').show(); },
            success: function(value) {
                $('#submit_columns_result').html("<div class=\"success\">"+value+"</div>");
                //$('#submit_columns_result').show();
               },
            type: "post",
        });
        spin_off();
}

function alter_column(url,table,col_name) {

        $('#submit_column_result').hide();
        spin_on();

        var content = col_name +';'+
            $('#'+col_name+'_type').val() +';'+
            $('#'+col_name+'_size').val();
        $.ajax({
            url: url,
            data: {cmd:'update',type:'alter',table_id:'alter',table_name:table,value:content,col_name:col_name},
            error: function(value) {
                $('#submit_column_result').html("<div class=\"error\">An error has occurred</div>");
                $('#submit_column_result').show(); },
            success: function(value) {
                $('#submit_columns_result').html("<div class=\"success\">"+value+"</div>");
               // $('#submit_columns_result').show();
               },
            type: "post",
        });
        spin_off();
}

function remove_column(url,table,col_name,content) {
        $('#submit_column_result').hide();
        spin_on();

        $.ajax({
            url: url,
            data: {cmd:'update',table_id:table,table_name:table,value:content,col_name:col_name,type:'column_remove'},
            error: function(value) {
                $('#submit_column_result').html("<div class=\"error\">An error has occurred</div>");
                $('#submit_column_result').show(); },
            success: function(value) {
                $('#submit_columns_result').html("<div class=\"success\">"+value+"</div>");
              //  $('#submit_columns_result').show();
               },
            type: "post",
        });
        spin_off();
}


//
//  Listeners
//

// 
//  Accordion
//


// Close out document.ready function

